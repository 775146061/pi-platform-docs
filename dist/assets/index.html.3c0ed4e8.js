import{r as p,o,c,a as n,b as t,w as e,F as l,d as r,e as a}from"./app.ead14e12.js";import{_ as u}from"./plugin-vue_export-helper.21dcd24c.js";const i={},k=r(`<h1 id="frontend-javascript-sdk" tabindex="-1"><a class="header-anchor" href="#frontend-javascript-sdk" aria-hidden="true">#</a> Frontend Javascript SDK</h1><p>The JS SDK is the frontend SDK, designed to be used in your HTML pages or Single-Page Apps, served in the Pi Browser.</p><p>In order to enable the SDK to function correctly, you need to declare your apps on the Developer Portal (open develop.pi in the Pi Browser to access the Developer Portal).</p><p>This SDK is <strong>not</strong> for a server-side NodeJS app.</p><h2 id="installation" tabindex="-1"><a class="header-anchor" href="#installation" aria-hidden="true">#</a> Installation</h2><p>Add the following <code>script</code> tags to all pages where you need to call the Pi Apps SDK:</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://sdk.minepi.com/pi-sdk.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">Pi<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">version</span><span class="token operator">:</span> <span class="token string">&quot;2.0&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>This will load the Pi Network JS SDK as a global <code>window.Pi</code> object.</p><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><h3 id="authenticate-a-user" tabindex="-1"><a class="header-anchor" href="#authenticate-a-user" aria-hidden="true">#</a> Authenticate a user</h3><p>You cannot perform any user-related operations (e.g read the user&#39;s info, request a payment from them) until you have successfully authenticated the user. The first time, they will be presented with a dialog asking for their consent to share their data with your app.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Authenticate the user, and get permission to request payments from them:</span>
<span class="token keyword">const</span> scopes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;payments&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token comment">// Read more about this callback in the SDK reference:</span>
<span class="token keyword">function</span> <span class="token function">onIncompletePaymentFound</span><span class="token punctuation">(</span><span class="token parameter">payment</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

Pi<span class="token punctuation">.</span><span class="token function">authenticate</span><span class="token punctuation">(</span>scopes<span class="token punctuation">,</span> onIncompletePaymentFound<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">auth</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hi there! You&#39;re ready to make payments!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="request-a-payment" tabindex="-1"><a class="header-anchor" href="#request-a-payment" aria-hidden="true">#</a> Request a payment</h3><p>The <code>createPayment</code> method enables you to request a payment from the current user to your app&#39;s account.</p><p>The user will be prompted with a modal provided by the Pi Wallet, enabling them to sign the transaction and submit it to the Pi blockchain.</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>
Pi<span class="token punctuation">.</span><span class="token function">createPayment</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token comment">// Amount of \u03C0 to be paid:</span>
  <span class="token literal-property property">amount</span><span class="token operator">:</span> <span class="token number">3.14</span><span class="token punctuation">,</span>
  <span class="token comment">// An explanation of the payment - will be shown to the user:</span>
  <span class="token literal-property property">memo</span><span class="token operator">:</span> <span class="token string">&quot;...&quot;</span><span class="token punctuation">,</span> <span class="token comment">// e.g: &quot;Digital kitten #1234&quot;,</span>
  <span class="token comment">// An arbitrary developer-provided metadata object - for your own usage:</span>
  <span class="token literal-property property">metadata</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// e.g: { kittenId: 1234 }</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  <span class="token comment">// Callbacks you need to implement - read more about those in the detailed docs linked below:</span>
  <span class="token function-variable function">onReadyForServerApproval</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">paymentId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">onReadyForServerCompletion</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">paymentId<span class="token punctuation">,</span> txid</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">onCancel</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">paymentId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function-variable function">onError</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error<span class="token punctuation">,</span> payment</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">/* ... */</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>This code block is a <strong>simplified example</strong> to give you a sense of how it works.</p><p>In order to make sure that all involved parties (your app, your server, the Pi servers, and the Pi blockchain) are in sync, the payment needs to go through a <strong>Server-Side Approval</strong> flow and a <strong>Server-Side Completion</strong> flow.</p><p>Please refer to:</p>`,19),m=a("the full Payments documentation"),d=a(" to learn about the complete payment flow"),h=a("the Platform API documentation"),b=a(" to learn how to confirm the payment and acknowledge it from your server"),g=n("li",null,"the Demo App (coming soon!) to view an example of how you can implement the various required flows in your app's code.",-1);function f(y,v){const s=p("RouterLink");return o(),c(l,null,[k,n("ul",null,[n("li",null,[t(s,{to:"en/payments.html"},{default:e(()=>[m]),_:1}),d]),n("li",null,[t(s,{to:"en/platform_API.html"},{default:e(()=>[h]),_:1}),b]),g])],64)}var P=u(i,[["render",f]]);export{P as default};
